TO DO

Change term carriedOverBalance to Deferred amount:
    The amounts that wont be adressed on this billing date but on later ones

getNextCycle() resolve end for variant 0

Must define what to do with the height of each cycle container
Make a table with scroll

Transaction container:

	ADD button function:
		-validate data
		if valid data:
			-fetch data
			if valid request:
				-close form container
				-make sure that all inputs get back to their default values
				-add new transaction to Transaction Container
			else:
				maybe display the error somewhere, but it would be better to ensure the 
				request success by validating the data properly.
		else:
			display errors and keep input values

		Note: every time a new transaction is added several containers will get another 
		item

General things I don't know where to put

	The fucking function:
		This madafaka starts by taking an array of transactions (maybe just the selected 
		ones in our Transaction container instead of all of them)

		Then, it must get an object that aligns, conforms, and matches the interface 
		OutlookInterface.

		Finally, it passes the object to the Outlook component.
	
	getInterestsToPay(transaction):
		this one will calculate the interests for a specific transaction.
		divide amount by installments, itereate through each cycle and return
		the insterests. the remainingCapital must be 0 at the end.

----------------------------------------------------------------------------------------
GET OUTLOOK OBJECT

cycles [
	{
		cycle,
		cycleStart,
		cycleEnd,
		interestRate,
		transactionBalances,
		subtotalBar,
		cycleBill
	}
]

totalBar {
	paidCapital,
	paidInterests
}

CycleBillInterface {
    dueDate: Date | string,
    interestsFromPrevDebt: number,
    cycleInterests: number,
    addressableAmount: number,
    minimumPayment: number,
    carriedOverBalance: number,
    fullPayment: number
}

cycleMap Map<Cycle, CycleInterface>

Outlook = {
	cycles [
		{
			cycle,
			cycleStart,
			cycleEnd,
			interestRate,
			transactionBalances,
			subtotalBar,
			cycleBill {
				dueDate: Date | string,
				interestsFromPrevDebt: number,
				cycleInterests: number,
				addressableAmount: number,
				minimumPayment: number,
				carriedOverBalance: number,
				fullPayment: number
			}
		}
	],
	totalBar
}

function decomposeTransactionAndAddBalancesToOutlook {
	for installment in installments:
		TransactionBalance
		TransactionBalance
		TransactionBalance {
			transactionDate: Date | string,
			installments: { n: number, of: number},
			paidCapital: number,
			paidInterests: number,
			remainingCapital: number,
			remainingInterests: number
		}

		get or create cycle and add to cycle.transactionBalances
		execute value addition to subtotalBar

		cycleBill:
			dueDate = cycle.dueDate
			interestsFromPrevDebt = 
			cycleInterests += cycleInterests
			addressableAmount += paidCapital / installments.n
			minimumPayment += addressableAmount + 
			carriedOverBalance += remainingCapital
			fullPayment += addressableAmount + remainingCapital + cycleInterests
}


CycleInterface {
    cycle: number,
    cycleStart: Date | string,
    cycleEnd: Date | string,
    interestRate: number,
    transactionBalances: TransactionBalanceInterface[],
    subtotalBar: SubtotalBarInterface,
    cycleBill: CycleBillInterface
}

TotalBarInterface {
    paidCapital: number,
    paidInterests: number,
}

addTransactionBalancesToCycles(transaction: Transaction, cycles: Map): void {

	let cycle = getCurrentCycle(transaction);

	let paidCapital = 0;
	let paidInterests = 0;
	let remainingCapital;
	let remainingInterests;

	for (let installment = 1; i <= transaction.installments; i++) {

		let { start, billingDate } = cycle;
		let daysInCycle = dayjs(billingDate).diff(start, "days");

		if (installment === 1) {
			cycleDaysInDebt = dayjs(billingDate).diff(this.date, "days") + 1;
		} else {
			cycleDaysInDebt = dayjs(billingDate).diff(start, "days") + 1;
		}

		let cycleInterests = debt * Transaction.interestRate / 100 * cycleDaysInDebt / daysInCycle;

		paidCapital += transaction.amount / transaction.installments;
		paidInterests += cycleInterests;
		remainingCapital = transaction.amount - paidCapital;
		remainingInterests = transaction.interestsToBePaid - paidInterests;

		const transactionBalance = {
			transactionDate: transaction.date,
			installments: { "n": installment, "of": transaction.installments},
			paidCapital: paidCapital,
			paidInterests: paidInterests,
			remainingCapital: remainingCapital,
			remainingInterests: remainingInterests
		}

		if (cycles.has(cycle)) {
			cycles.get(cycle).push(transactionBalance);
		} else {
			cycles.set(cycle, [transactionBalance]);
		}

		cycle = getNextCycle(cycle, 0)
	}
}


OBSERVATIONS ON FUNCTIONALITY

remainingCapital and remainingInterests get to be really close to 0.
	"remainingCapital":-2.9103830456733704e-11,
	"remainingInterests":-1.8189894035458565e-12

cycle bills stop referencing amounts that belong to transactions paid in full.


----------------------------------------------------------------------------------------
GET INTERESTS TO PAY

Calculate interests from the purchase date.

Divide the amount by the number of installments.

for i in installments:
	calculate month interests





Things I need to calculate interests:

	days in cycle (nonetheless, it appears that days in debt are always divided by 30)











FINANCE IDEAS AND THEORIES

Month interests:
    The calculated amount of interests which belong to a month.

Deferred amount:
    The amounts that wont be adressed on this billing date but on later ones

addressable amount:
    This amount is the addition of the installments to be paid the following
    due date.


cycle has grace period? true or false



reality:

    no carried over amount from previous cycle (I think)

    Advance for COP 8,800,000 (24 installments) generated interests from the date 
    it was made to the billing date over the whole amount.

    Fee for COP 5,550 (1 installment) generated no interests.

    minimum payment is equals to interests (advance interests) + addressable amount 
    (1/24 advance + fee).

    From this point we got two amounts; minimum payment and deferred amount. minimum
    payment did not generated any interests on new cycle.

    deferred amount generated interests from the first day of the cycle to the date 
    the debt was paid in full.


PROCESS TO CALCULATE INTERESTS

if there is no grace period:

    calculate interests over each payment from the purchase date to the billing 
    date.

    calculate interests over the previous cycle carried over amount from the first 
    to the last day of the cycle.

    get the minimum payment by adding these interests to the addressable amount.

    from this point we have two amounts; minimum payment and deferred amount.


if there is a grace period:

    There should not be carried over amount from the previous cycle

    calculate interests over each payment from the purchase date to the billing 
    date. Excluding purchases to be paid in one installment (Those doesn't genarate 
    interests at least when there's a grace period)

    get the minimum payment by adding these interests to the addressable amount.

    form this point we may have two amounts; minimum payment and maybe a deferred
    amount.

    I guess if the debt is paid in full before the due date, there won't be charges 
    from the deffered amount even in this new cycle.


if the grace period is going to be lost:

    There should not be carried over amount from the previous cycle

    calculate interests over each payment from the purchase date to the billing 
    date. Excluding purchases to be paid in one installment (Those doesn't genarate 
    interests at least when there's a grace period)

    get the minimum payment by adding these interests to the addressable amount (I 
    think this amount is not charged interests up to the due date.)

    from this point we have two amounts; minimum payment and deferred amount.








Theory (I think is already invalid since interests are geenerated over complete 
amounts)

if there is no grace period:

    calculate interests over each payment from the purchase date to the billing 
    date.

    calculate interests over the previous cycle carried over amount from the first 
    to the last day of the cycle.

    get the minimum payment by adding these interests to the addressable amount.

    from this point we have two amounts; minimum payment and deferred amount.


if there is a grace period:

    There should not be carried over amount from the previous cycle

    calculate interests over the amount to be deferred of each purchase from the 
    purchase date to the billing date.

    get the minimum payment by adding these interests to the addressable amount.

    form this point we may have two amounts; minimum payment and maybe a deferred
    amount.

    I guess if the debt is paid in full before the due date, there won't be charges 
    from the deffered amount even in this new cycle.


if the grace period is going to be lost:

    There should not be carried over amount from the previous cycle

    calculate interests over the amount to be deferred of each purchase from the 
    purchase date to the billing date.

    get the minimum payment by adding these interests to the addressable amount (I 
    think this amount is not charged interests up to the due date.)

    from this point we have two amounts; minimum payment and deferred amount.



POSSIBLE IDEAS

A grace period only applies for purchases and not advances





































		

NOTES

Making the Balance table thinner make the columns look more aligned and better.


SUGGESTIONS

Total bar should have: 
-endDate: when the debt would get paid in full.
-maybe totalMonths or n/of based on the current date:

Page or section to see details about a Transaction, such as the amount to pay each 
month for that specific transaction. That is, amount / installments + monthInterests.








--------------------------------------- REDUX ---------------------------------------

INSTALLATION

npm init -y

npm install @reduxjs/toolkit

npm install react-redux


SETUP

public
src
	app
		store.js
	features
		counter
			counter.js
			counterSlice.js
			counterAPI.js
		anotherStateFeature
			thatThing.js
			thatThingSlice.js


CREATE A STORE

Pass in an object with the reducer property to the configureStore function. This object 
will contain all the values we want to be stored as property keys, and the value to each
property will be the reducer function that will handel the changes of each value.


export const store = configureStore({
	reducer: {
		counter: counterReducer,
		nameInput: nameInputReducer
	}
})

By doing so we will be able to use state.counter and state.nameInput.


ACCESS DATA FROM THE STORE

const inputValue = useSelector((state) => state.form.amount);


ACCESS REDUCER

const dispatch = useDispatch();

dispatch(setAmount(e.target.value));





export interface TransactionBalanceInterface {
    transactionDate: Date | string,
    installments: { n: number, of: number},
    paidCapital: number,
    paidInterests: number,
    remainingCapital: number,
    remainingInterests: number
}

export interface CycleTransactionContainerInterface {
    cycle: number,
    cycleStart: Date | string,
    cycleEnd: Date | string,
    interestRate?: number,
    transactionBalances: Array<TransactionBalanceInterface>
}

export interface SubtotalBarInterface {
    paidCapital: number,
    paidInterests: number,
    remainingCapital: number,
    remainingInterests: number
}

export interface CycleBillInterface {
    dueDate: Date | string,
    interestsFromPrevDebt: number,
    cycleInterests: number,
    addressableAmount: number,
    minimumPayment: number,
    carriedOverBalance: number,
    fullPayment: number
}

interface CycleInterface extends 
CycleTransactionContainerInterface,
SubtotalBarInterface,
CycleBillInterface {};

export interface CycleContainerInterface {
    cycles: Array<CycleInterface>
};


How would CycleContainerInterface look like?